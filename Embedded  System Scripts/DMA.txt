#include "stm32f10x.h"
typedef enum(FAILED=0,PASSED=!FAILED)TestStatus;
#define BufferSize 12
uint32_t CurrDataCounterBegin=0;
volatile uint32_t CurrDataCounterEnd=1;
TestStatus TransferStatus=FAILED;
const uint32_t SRC_Const_Buffer[BufferSize]=
{
	0x01020304,0x05060708,0x090A0B0C,0x0D0E0F10,
	0x11121314,0x15161718,0x191A1B1C,0x1D1E1F20,
	0x21222324,0x25262728,0x292A2B2C,0x2D2E2F30
};
uint32_t DST_Buffer(BufferSize);
void NVIC_Config();
void DMA_Config(void);
TestStatus Buffercmp(const uint32_t *pBuffer,uint32_t *pBuffer1,uint16_t BufferLength);
int main(void)
{
	NVIC_Config();
	DMA_Config();
	while(CurrDataCounterEnd!=0);
	TransferStatus=Buffercmp(SRC_Const_Buffer,DST_Buffer,BufferSize);
	
	
	while(1);
}

void NVIC_Config(void)
{
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
	NVIC_InitStructure.NVIC_IRQChannel=DMA1_Channel6_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptPriority=0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority=0;
	NVIC_InitStructure.NVIC_IRQChannelCmd=ENABLE;
	NVIC_Init(&NVIC_InitStructure);
}

void DMA_Config(void)
{
	DMA_InitTypeDef DMA_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);
	DMA_DeInit(DMA1_Channel6);
	DMA_InitStructure.DMA_DIR=DMA_DIR_PeriphralSRC;
	DMA_InitStructure.DMA_MemoryBaseADDr=(uint32_t)SRC_Const_Buffer;
	DMA_InitStructure.DMA_BufferSize=BufferSize;
	DMA_InitStructure.DMA_PeripheralInc=DMA_PeripheralDataSize_Word;
	DMA_InitStructure.DMA_MemoryInc=DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_Mode=DMA_Mode_Normal;
	DMA_InitStructure.DMA_Priority=DMA_Priority_High;
	DMA_InitStructure.DMA_M2M=DMA_M2M_Enable;
	DMA_Init(DMA_Channel6,&DMA_InitStructure);
	DMA_ITConfig(DMA1_Channel16,DMA_IT_TC,ENABLE);
	CurrDataCounterBegin=DMA_GetCurrDataCounter(DMA1_Channel16);
	DMA_Cmd(DMA1_Channel6,ENABLE);
}

TestStatus Buffercmp(const uint32_t *pBuffer,uint32_t * pBuffer, uint16_t BufferLength)
{
while(BufferLength --)
{
if(*pBuffer !=*pBuffer1)
{
return FAILED;
}
pBuffer ++;
pBuffer1 ++;
}
return PASSED

}




#include "stm32f10x_it_h"
extern volatile uint32_t CurrDataCounterEnd;
void DMA1_Channel6_IRQHandler(void)
{
	if(DMA_GetITStatus(DMA1_IT_TC6)
	{
		CurrDataCounterEnd=DMA_GetCurrDataCounter(DMA1_Channel6);
		DMA_ClearITPendingBit(DMA1_IT_GL6);
	}
	
}