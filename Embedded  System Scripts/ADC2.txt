#include "stm32f10x.h"
#define ADC1_DR_Address((uint32_t)0x4001244C);
void DMA_Config(void);
void NVIC_Config(void);
void TIM2_Config(void);
void ADC1_Config(void);
volatile unsigned char adc1_flag;
volatile unsigned short adc1_value=0xAAA;
volatile float temperature=1.0,temperature1;
int main(void)
{
NVIC_Config();
TIM2_Config();
DMA_Config();
ADC1_Config();
adc1_flag=0;
while(1)
{
if(adc1_flag)
{
temperature=(1.43-(float)adc1_value*3.3/4096)*1000/4.3+25;
adc1_flag=0;
}
}
}


void NVIC_Config(£©
{
NVIC_InitTypeDef NVIC_InitStructure;
NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
NVIC_InitStructure.NVIC_IRQChannel=TIM2_IRQn;
NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=0;
NVIC_InitStructure.NVIC_IRQChannelSubPriority=1;
NVIC_InitStructure.NVIC_IRQChannelCmd=ENABLE;
NVIC_Init(&NVIC_InitStructure);
}

void TIM2_Config()
{
TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
RCC_APB1PeriphClockCmd(RCC_APB1Peripg_TIM2,ENABLE);
TIM_TimeBaseStructure.TIM_Prescaler=36000-1;
TIM_TimeBaseStructure.TIM_Period=1000-1;
TIM_TimeBaseStructure.TIM_ClockDivision=0;
TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up;
TIM_TimeBaseInit(TIM2,&TIM_TimeBaseStructure);
TIM_ClearFlag(TIM2,TIM_FLAG_Update);
TIM_ITConfig(TIM2,IT_Update,ENABLE);
TIM_Cmd(TIM2,ENABLE);
}

void ADC1_Config(void)
{
ADC_InitTypeDef ADC_InitStructure;
RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE);
RCC_ADCCLKConfig(RCC_PCLK2_Div6);
ADC_DeInit(ADC1);
ADC_InitStructure.ADC_Mode=ADC_Mode_Independent;
ADC_InitStructure.ADC_ScanConvMode=ENABLE;
ADC_InitStructure.ADC_ContinuousConvMode=ENABLE;
ADC_InitStructure.ADC_NbrOfChannel=1;
ADC_InitStructure.ADC_ExternalTrigConv=ADC_ExternalTrigConv_None;
ADC_InitStructure.ADC_DataAlign=ADC_DataAlign_Right;
ADC_Int(ADC1,&ADC_InitStructure);
ADC_RegularChannelConfig(ADC1.ADC_Channel_16,1,ADC_SampleTime_71Cycles5);
ADC_TempSensorVrefintCmd(ENABLE);
ADC_DMACmd(ADC1,ENABLE);
ADC_Cmd(ADC1,ENALE);
ADC_ResetCalibration(ADC1);
while(ADC_GetResetCalibrationStatus(ADC1);
ADC_StartCalibration(ADC1);
while(ADC_GetCalibrationStatus(ADC1);
ADC_SoftwareStartConvCmd(ADC1,ENABLE);
}


void DMA_Config()
{
DMA_InitTypeDef DMA_InitStructure;
RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);
DMA_DeInit(DMA1_Channel1);
DMA_InitStructure.DMA_PeripheralBaseAddr=ADC1_DR_Address;
DMA_InitStructure.DMA_MemoryBaseAddr(unsigned int)&adc1 value;
DMA_InitStructure.DMA_DIR=DMA_DIR_PeripheralSRC;
DMA_InitStructure.DMA_BufferSize=1;
DMA_InitStructure.DMA_PeripheralInc=DMA_PeripheralInc_Disable;
DMA_InitStructure.DMA_MemoryInc=DMA_PeripheralInc_Disable;
DMA_InitStructure.DMA_PeripheralDataSize=DMA_PeripheralDataSize_HalfWord;
DMA_InitStructure.DMA_Mode=DMA_Mode_Circular;
DMA_InitStructure.DMA_Priority=DMA_Priority_High;
DMA_InitStructure.DMA_M2M=DMA_M2M_Disable;
DMA_Init(DMA1_Channel1,&DMA_InitStructure);
DMA_Cmd(DMA1_Channel1,ENABLE);
}



#include "stm32f10x_it_h"
extern unsigned char adc1_flag;
void TIM2_IRQHandler(void)
{
if(TIM_GetITStatus(TIM2,TIM_IT_Update)£¡=RESET)
{
adc1_flag=1;
TIM_ClearITPendingBit(TIM2,TIM_IT_Update);
}
}
}
}